/*
 * Copyright (C) 2015 Tim Vaughan <tgvaughan@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package bacter.util;

import bacter.ConversionGraph;
import bacter.Locus;
import beast.app.treeannotator.CladeSystem;
import beast.evolution.tree.Node;
import beast.math.statistic.DiscreteStatistics;

import javax.swing.*;
import javax.swing.border.EtchedBorder;
import java.awt.*;
import java.io.*;
import java.lang.reflect.InvocationTargetException;
import java.util.*;
import java.util.List;

/**
 * A rewrite of TreeAnnotator targeted at summarizing ACG logs
 * generated by bacter.
 *
 * @author Tim Vaughan <tgvaughan@gmail.com>
 */
public class ACGAnnotator {

    public enum HeightStrategy { MEAN, MEDIAN }

    static class ACGAnnotatorOptions {
        public File inFile;
        public File outFile = new File("summary.tree");
        public double burninPercentage = 10.0;
        public HeightStrategy heightStrategy = HeightStrategy.MEAN;
    }

    public ACGAnnotator(ACGAnnotatorOptions options) throws Exception {

        // Initialise reader

        LogFileReader logReader = new LogFileReader(options.inFile,
                options.burninPercentage);

        System.out.println(logReader.getACGCount() + " ACGs in file.");

        System.out.println("The first " +
                (options.burninPercentage) + "% (" +
                (logReader.getBurnin()) + ") of ACGs will be discarded " +
                "to account for burnin.");

        // Compute CF Clade probabilities

        System.out.println("\nComputing CF clade credibilities...");

        CladeSystem cladeSystem = new CladeSystem();

        for (ConversionGraph acg : logReader)
            cladeSystem.add(acg, false);

        cladeSystem.calculateCladeCredibilities(logReader.getCorrectedACGCount());

        // Identify MCC CF topology

        System.out.println("\nIdentifying MCC CF topology...");

        ConversionGraph acgBest = null;
        double bestScore = Double.NEGATIVE_INFINITY;

        for (ConversionGraph acg : logReader ) {
            double score = cladeSystem.getLogCladeCredibility(acg.getRoot(), null);

            if (score>bestScore) {
                acgBest = acg.copy();
                bestScore = score;
            }
        }

        if (acgBest == null)
            throw new IllegalStateException("Failed to find best tree topology.");

        // Remove conversions
        for (Locus locus : acgBest.getLoci())
                acgBest.getConversions(locus).clear();

        // Collect CF node heights

        System.out.println("\nCollecting CF node heights...");

        Set<String> attributeNames = new HashSet<>();
        attributeNames.add("height");

        cladeSystem = new CladeSystem(acgBest);
        for (ConversionGraph acg : logReader) {
            cladeSystem.collectAttributes(acg, attributeNames);
        }
        cladeSystem.removeClades(acgBest.getRoot(), true);
        cladeSystem.calculateCladeCredibilities(logReader.getCorrectedACGCount());

        // Annotate node heights of winning CF topology
        annotateCF(cladeSystem, acgBest.getRoot(), options.heightStrategy);

        System.out.println("\nWriting output to " + options.outFile.getName()
        + "...");

        try (PrintStream ps = new PrintStream(options.outFile)) {
            ps.print(logReader.getPreamble());
            ps.println("tree STATE_0 = " + acgBest.getExtendedNewick());
            ps.println("End;");
        }

        System.out.println("\nDone!");
    }

    private BitSet annotateCF(CladeSystem cladeSystem,
                              Node node, HeightStrategy strategy) {
        BitSet bits = new BitSet();

        if (node.isLeaf()) {
            bits.set(cladeSystem.getTaxonIndex(node)*2);
        } else {
            for (Node child : node.getChildren()) {
                bits.or(annotateCF(cladeSystem, child, strategy));
            }

            List<Object[]> rawHeights =
                    cladeSystem.getCladeMap().get(bits).getAttributeValues();

            double[] heights = new double[rawHeights.size()];
            for (int i = 0; i < rawHeights.size(); i++)
                heights[i] = (double) rawHeights.get(i)[0];

            if (strategy == HeightStrategy.MEAN)
                node.setHeight(DiscreteStatistics.mean(heights));
            else
                node.setHeight(DiscreteStatistics.median(heights));

            Arrays.sort(heights);
            double minHPD = heights[(int) Math.round(0.025 * heights.length)];
            double maxHPD = heights[(int) Math.round(0.975 * heights.length)];

            node.metaDataString = "height_95%_HPD={" + minHPD + "," + maxHPD + "}";
        }

        return bits;
    }

    /**
     * Class representing ACG log files.  Includes methods for
     * querying the number of ACGs defined, included and excluded
     * by the given burn-in percentage, as well as implementing an
     * iterator over all ACGs included after burn-in.  The iterator
     * automatically displays a progress bar on stdout.
     */
    class LogFileReader implements Iterable<ConversionGraph> {
        File logFile;
        BufferedReader reader;

        List<String> preamble;
        String nextLine;

        List<Locus> loci;

        int nACGs, burnin;

        /**
         * Construct and initialize the reader.  The Preamble is
         * read and the list of loci constructed immediately.
         *
         * @param logFile ACG log file.
         * @throws IOException
         */
        public LogFileReader(File logFile, double burninPercentage) throws IOException {
            this.logFile = logFile;

            reader = new BufferedReader(new FileReader(logFile));
            preamble = new ArrayList<>();

            skipPreamble();

            loci = new ArrayList<>();
            extractLociFromPreamble();

            nACGs = 0;
            while (true) {
                if (getNextTreeString() == null)
                    break;

                nACGs += 1;
            }

            burnin = (int)Math.round(nACGs*burninPercentage/100);
        }


        /**
         * Internal method for skimming the preamble at the start
         * of the log, before we get to the tree section.
         *
         * @throws IOException
         */
        private void skipPreamble() throws IOException {
            boolean recordPreamble = preamble.isEmpty();

            while(true) {
                nextLine = reader.readLine();

                if (nextLine == null)
                    throw new IOException("Reached end of file while searching for first tree.");

                if (nextLine.toLowerCase().startsWith("tree"))
                    break;

                if (recordPreamble)
                    preamble.add(nextLine);
            }
        }

        /**
         * @return Everything read from the log file up until the first tree line.
         */
        public String getPreamble() {
            StringBuilder sb = new StringBuilder();
            for (String line : preamble)
                sb.append(line).append("\n");

            return sb.toString();
        }

        /**
         * Retrieve list of loci from skimmed preamble.
         */
        private void extractLociFromPreamble() {
            for (String line : preamble) {
                line = line.trim();
                if (line.startsWith("loci ") && line.endsWith(";")) {
                    for (String locusEntry : line.substring(5,line.length()-1).split(" ")) {
                        String[] locusPair = locusEntry.split(":");
                        loci.add(new Locus(locusPair[0], Integer.parseInt(locusPair[1])));
                    }
                }
            }
        }

        /**
         * Rewind to the beginning of the file.
         *
         * @throws IOException
         */
        private void reset() throws IOException {
            reader.close();
            reader = new BufferedReader(new FileReader(logFile));
            skipPreamble();
        }

        /**
         * @return the next available tree string or null if none exists
         * @throws IOException
         */
        private String getNextTreeString() throws IOException {
            StringBuilder sb = new StringBuilder();

            while (true) {
                if (nextLine == null)
                    return null;

                sb.append(nextLine.trim());
                if (nextLine.trim().endsWith(";"))
                    break;

                nextLine = reader.readLine();
            }
            nextLine = reader.readLine();

            String treeString = sb.toString();

            return treeString.substring(treeString.indexOf("("));
        }

        /**
         * Skip burn-in portion of log.
         *
         * @throws IOException
         */
        private void skipBurnin() throws IOException {
            for (int i=0; i<burnin; i++)
                getNextTreeString();
        }

        /**
         * @return loci read from the preamble
         */
        public List<Locus> getLoci() {
            return loci;
        }

        /**
         * @return total number of ACGs defined by file.
         */
        public int getACGCount() {
            return nACGs;
        }

        /**
         * @return number of ACGs excluded as burn-in
         */
        public int getBurnin() {
            return burnin;
        }

        /**
         * @return number of ACGs excluding burn-in
         */
        public int getCorrectedACGCount() {
            return nACGs - burnin;
        }

        @Override
        public Iterator<ConversionGraph> iterator() {
            try {
                reset();
                skipBurnin();
            } catch (IOException e) {
                throw new IllegalStateException(e.getMessage());
            }

            ConversionGraph acg = new ConversionGraph();
            for (Locus locus : getLoci())
                acg.lociInput.setValue(locus, acg);
            try {
                acg.initAndValidate();
            } catch (Exception e) {
                throw new IllegalStateException(e.getMessage());
            }

            return new Iterator<ConversionGraph>() {

                boolean lineConsumed = true;
                String nextLine = null;

                int current = 0;

                private String getNextLineNoConsume() {
                    if (lineConsumed) {
                        try {
                            nextLine = getNextTreeString();
                            lineConsumed = false;
                        } catch (IOException e) {
                            throw new IllegalStateException(e.getMessage());
                        }
                    }

                    return nextLine;
                }

                private void printProgressBar() {

                    if (current==0) {
                        System.out.println("0%             25%            50%            75%           100%");
                        System.out.println("|--------------|--------------|--------------|--------------|");
                    }

                    if (current % (getCorrectedACGCount()/61) == 0) {
                        System.out.print("*");
                        System.out.flush();
                    }
                }

                @Override
                public boolean hasNext() {
                    if (getNextLineNoConsume() != null)
                        return true;
                    else {
                        System.out.println();
                        return false;
                    }
                }

                @Override
                public ConversionGraph next() {
                    String result = getNextLineNoConsume();
                    lineConsumed = true;
                    acg.fromExtendedNewick(result);

                    printProgressBar();
                    current += 1;

                    return acg;
                }
            };
        }
    }


    /**
     * Use a GUI to retrieve ACGAnnotator options.
     *
     * @param options options object to populate using GUI
     * @return true if options successfully collected, false otherwise
     */
    private static boolean getOptionsGUI(ACGAnnotatorOptions options) {

        boolean[] canceled = {false};

        JDialog dialog = new JDialog((JDialog)null, true);
        dialog.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        dialog.setLocationRelativeTo(null);
        dialog.setTitle("ACGAnnotator");

        JLabel logFileLabel = new JLabel("ACG log file:");
        JLabel outFileLabel = new JLabel("Output file:");
        JLabel burninLabel = new JLabel("Burn-in percentage:");
        JLabel heightMethodLabel = new JLabel("Node height method:");

        JTextField inFilename = new JTextField(20);
        inFilename.setEditable(false);
        JButton inFileButton = new JButton("Choose File");

        JTextField outFilename = new JTextField(20);
        outFilename.setText(options.outFile.getName());
        outFilename.setEditable(false);
        JButton outFileButton = new JButton("Choose File");

        JSlider burninSlider = new JSlider(JSlider.HORIZONTAL,
                0, 100, 10);
        burninSlider.setMajorTickSpacing(50);
        burninSlider.setMinorTickSpacing(10);
        burninSlider.setPaintTicks(true);
        burninSlider.setPaintLabels(true);

        JComboBox<HeightStrategy> heightMethodCombo = new JComboBox<>(HeightStrategy.values());

        Container cp = dialog.getContentPane();
        BoxLayout boxLayout = new BoxLayout(cp, BoxLayout.PAGE_AXIS);
        cp.setLayout(boxLayout);

        JPanel mainPanel = new JPanel();

        GroupLayout layout = new GroupLayout(mainPanel);
        mainPanel.setLayout(layout);
        layout.setAutoCreateGaps(true);
        layout.setAutoCreateContainerGaps(true);

        layout.setHorizontalGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup()
                        .addComponent(logFileLabel)
                        .addComponent(outFileLabel)
                        .addComponent(burninLabel)
                        .addComponent(heightMethodLabel))
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                        .addComponent(inFilename)
                        .addComponent(outFilename)
                        .addComponent(burninSlider)
                        .addComponent(heightMethodCombo))
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                        .addComponent(inFileButton)
                        .addComponent(outFileButton)));

        layout.setVerticalGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup()
                        .addComponent(logFileLabel)
                        .addComponent(inFilename,
                                GroupLayout.PREFERRED_SIZE,
                                GroupLayout.DEFAULT_SIZE,
                                GroupLayout.PREFERRED_SIZE)
                        .addComponent(inFileButton))
                .addGroup(layout.createParallelGroup()
                        .addComponent(outFileLabel)
                        .addComponent(outFilename,
                                GroupLayout.PREFERRED_SIZE,
                                GroupLayout.DEFAULT_SIZE,
                                GroupLayout.PREFERRED_SIZE)
                        .addComponent(outFileButton))
                .addGroup(layout.createParallelGroup()
                        .addComponent(burninLabel)
                        .addComponent(burninSlider,
                                GroupLayout.PREFERRED_SIZE,
                                GroupLayout.DEFAULT_SIZE,
                                GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup()
                        .addComponent(heightMethodLabel)
                        .addComponent(heightMethodCombo,
                                GroupLayout.PREFERRED_SIZE,
                                GroupLayout.DEFAULT_SIZE,
                                GroupLayout.PREFERRED_SIZE)));

        mainPanel.setBorder(new EtchedBorder());
        cp.add(mainPanel);

        JPanel buttonPanel = new JPanel();

        JButton runButton = new JButton("Analyze");
        runButton.addActionListener((e) -> {
            options.burninPercentage = burninSlider.getValue();
            options.heightStrategy = (HeightStrategy)heightMethodCombo.getSelectedItem();
            dialog.setVisible(false);
        });
        runButton.setEnabled(false);
        buttonPanel.add(runButton);

        JButton cancelButton = new JButton("Quit");
        cancelButton.addActionListener((e) -> {
            dialog.setVisible(false);
            canceled[0] = true;
        });
        buttonPanel.add(cancelButton);

        JFileChooser inFileChooser = new JFileChooser();
        inFileButton.addActionListener(e -> {
            inFileChooser.setDialogTitle("Select ACG log file to summarize");
            if (options.inFile == null)
                inFileChooser.setCurrentDirectory(new File(System.getProperty("user.dir")));
            int returnVal = inFileChooser.showOpenDialog(dialog);

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                options.inFile = inFileChooser.getSelectedFile();
                inFilename.setText(inFileChooser.getSelectedFile().getName());
                runButton.setEnabled(true);
            }
        });

        JFileChooser outFileChooser = new JFileChooser();
        outFileButton.addActionListener(e -> {
            outFileChooser.setDialogTitle("Select output file name.");
            if (options.inFile != null)
                outFileChooser.setCurrentDirectory(options.inFile);
            else
                outFileChooser.setCurrentDirectory(new File(System.getProperty("user.dir")));

            outFileChooser.setSelectedFile(options.outFile);
            int returnVal = outFileChooser.showOpenDialog(dialog);

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                options.outFile = outFileChooser.getSelectedFile();
                outFilename.setText(outFileChooser.getSelectedFile().getName());
            }
        });

        cp.add(buttonPanel);

        dialog.pack();
        dialog.setResizable(false);
        dialog.setVisible(true);

        return !canceled[0];
    }

    /**
     * Prepare JFrame to which ACGAnnotator output streams will be
     * directed.
     */
    private static void setupGUIOutput() {
        JFrame frame = new JFrame();
        frame.setTitle("ACGAnnotator");
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        JTextArea textArea = new JTextArea(25, 80);
        textArea.setFont(new Font("monospaced", Font.PLAIN, 12));
        textArea.setEditable(false);
        frame.getContentPane().add(new JScrollPane(textArea), BorderLayout.CENTER);

        JButton closeButton = new JButton("Close");
        closeButton.addActionListener(e -> System.exit(0));
        JPanel buttonPanel = new JPanel();
        buttonPanel.add(closeButton);
        frame.getContentPane().add(buttonPanel, BorderLayout.PAGE_END);

        // Redirect streams to output window:
        OutputStream out = new OutputStream() {
            @Override
            public void write(int b) throws IOException {
                textArea.append(String.valueOf((char)b));
            }
        };

        System.setOut(new PrintStream(out, true));
        System.setErr(new PrintStream(out, true));

        frame.pack();
        frame.setVisible(true);
    }

    public static String helpMessage =
            "ACGAnnotator - produces summaries of Bacter ACG log files.\n"
                    + "\n"
                    + "Usage: appstore ACGAnnotator [-help | [options] logFile [outputFile]\n"
                    + "\n"
                    + "Option                   Description\n"
                    + "--------------------------------------------------------------\n"
                    + "-help                    Display usage info.\n"
                    + "-heights {mean,median}   Choose node height method.\n"
                    + "-burnin percentage       Choose _percentage_ of log to discard\n"
                    + "                         in order to remove burn-in period.";

    /**
     * Print usage info and exit.
     */
    public static void printUsageAndExit() {
        System.out.println(helpMessage);
        System.exit(0);
    }

    /**
     * Display error, print usage and exit with error.
     */
    public static void printUsageAndError() {
        System.err.println("Error processing command line parameters.\n");
        System.err.println(helpMessage);
        System.exit(1);
    }

    /**
     * Retrieve ACGAnnotator options from command line.
     *
     * @param args command line arguments
     * @param options object to populate with options
     */
    public static void getCLIOptions(String[] args, ACGAnnotatorOptions options) {
        int i=0;
        while (args[i].startsWith("-")) {
            switch(args[i]) {
                case "-help":
                    printUsageAndExit();
                    break;

                case "-burnin":
                    if (args.length<=i+1)
                        printUsageAndError();

                    try {
                        options.burninPercentage = Double.parseDouble(args[i+1]);
                    } catch (NumberFormatException e) {
                        printUsageAndError();
                    }

                    if (options.burninPercentage<0 || options.burninPercentage>100)
                        printUsageAndError();

                    i += 1;
                    break;

                case "-heights":
                    if (args.length<=i+1)
                        printUsageAndError();

                    if (args[i+1].toLowerCase().equals("mean")) {
                        options.heightStrategy = HeightStrategy.MEAN;

                        i += 1;
                        break;
                    }

                    if (args[i+1].toLowerCase().equals("median")) {
                        options.heightStrategy = HeightStrategy.MEDIAN;

                        i += 1;
                        break;
                    }

                    printUsageAndError();

                default:
                    printUsageAndError();
            }

            i += 1;
        }

        if (i >= args.length)
            printUsageAndError();
        else
            options.inFile = new File(args[i]);

        if (i+1<args.length)
            options.outFile = new File(args[i+1]);
    }

    /**
     * Main method for ACGAnnotator.  Sets up GUI if needed then
     * uses the ACGAnnotator constructor to actually perform the analysis.
     *
     * @param args command line arguments
     */
    public static void main(String[] args) {
        ACGAnnotatorOptions options = new ACGAnnotatorOptions();

        if (args.length == 0) {
            // Retrieve options from GUI:
            try {
                SwingUtilities.invokeAndWait(() -> {
                    if (!getOptionsGUI(options))
                        System.exit(0);
                });
            } catch (InterruptedException | InvocationTargetException e) {
                e.printStackTrace();
            }

            SwingUtilities.invokeLater(ACGAnnotator::setupGUIOutput);

        } else {
            getCLIOptions(args, options);
        }

        // Run ACGAnnotator
        try {
            new ACGAnnotator(options);

        } catch (Exception e) {
            if (args.length == 0) {
                JOptionPane.showMessageDialog(null, e.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                System.err.println(e.getMessage());
                System.err.println();
                System.err.println(helpMessage);
            }

            System.exit(1);
        }
    }
}
