<beast version='2.0'
       namespace='beast.app.beauti:beast.core:beast.evolution.branchratemodel:beast.evolution.speciation:beast.evolution.tree.coalescent:beast.core.util:beast.evolution.nuc:beast.evolution.operators:beast.evolution.sitemodel:beast.evolution.substitutionmodel:beast.evolution.likelihood:beast.evolution:beast.math.distributions'>


    <!--mergewith point="operatorMergePoint">
        <fragment id='popModelDependentACGOperators' spec="beast.app.beauti.Fragment">
            <![CDATA[
            <operator id="addRemove_$(model).t:$(n)" spec="bacter.operators.AddRemoveConversion" weight="10.0">
                <acg idref="Tree.t:$(n)"/>
                <delta idref="delta.t:$(n)"/>
                <populationModel idref="$(model).t:$(n)"/>
            </operator>

            <operator id="addRemoveDetour_$(model).t:$(n)" spec="bacter.operators.AddRemoveDetour" weight="10.0"
                acg="@Tree.t:$(n)" delta="@delta.t:$(n)" populationModel="@$(model).t:$(n)"/>

            <operator id="CFuniform_$(model).t:$(n)" spec='bacter.operators.CFUniform' acg="@Tree.t:$(n)"
                rho="@rho.t:$(n)" delta="@delta.t:$(n)" populationModel="@$(model).t:$(n)" weight="10"/>

            <operator id="CFWB_$(model).t:$(n)" spec='bacter.operators.CFWilsonBalding'
                acg="@Tree.t:$(n)" rho="@rho.t:$(n)" delta="@delta.t:$(n)" populationModel="@$(model).t:$(n)"
                alpha="0.1" weight="10"/>
            ]]>
            <connect srcID='addRemove_$(model).t:$(n)' targetID='mcmc' inputName='operator'
                     if='inposterior($(model).t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='addRemoveDetour_$(model).t:$(n)' targetID='mcmc' inputName='operator'
                     if='inposterior($(model).t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='CFuniform_$(model).t:$(n)' targetID='mcmc' inputName='operator'
                     if='inposterior($(model).t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='CFWB_$(model).t:$(n)' targetID='mcmc' inputName='operator'
                     if='inposterior($(model).t:$(n)) and Tree.t:$(n)/estimate=true'/>
        </fragment>
    </mergewith-->

    <mergewith point='ACGPriorTemplates'>

        <!-- Coalescent for Constant population -->
        <subtemplate id='CoalescentConstantPopulation' class='bacter.model.ACGCoalescent'
                     mainid='CoalescentConstant.t:$(n)'>
            <![CDATA[
            <plugin spec='bacter.model.ACGCoalescent' id="CoalescentConstant.t:$(n)">
                <tree idref="Tree.t:$(n)"/>
                <rho id="rho.t:$(n)" spec="parameter.RealParameter" value="0.001"/>
                <delta id="delta.t:$(n)" spec="parameter.RealParameter" value="1000"/>
                <populationModel id="popModelConstant.t:$(n)" spec="beast.evolution.tree.coalescent.ConstantPopulation">
                    <popSize id="popSize.t:$(n)" spec="parameter.RealParameter" value="1" />
                </populationModel>
            </plugin>

            <prior id='popSizePrior.t:$(n)' x='@popSize.t:$(n)'>
                <distr spec="beast.math.distributions.OneOnX"/>
            </prior>

            <operator id='popSizeScaler.t:$(n)' spec='ScaleOperator' scaleFactor="0.8"
                weight="1" parameter="@popSize.t:$(n)"/>
            ]]>
            <plate fragment="popModelDependentACGOperators" var="model" range="popModelConstant"/>

            <connect srcID='CoalescentConstant.t:$(n)' targetID='prior' inputName='distribution'
                     if='inposterior(CoalescentConstant.t:$(n)) and Tree.t:$(n)/estimate=true'>Coalescent prior with
                constant rate on tree t:$(n)
            </connect>
            <connect srcID='popSizePrior.t:$(n)' targetID='prior' inputName='distribution'
                     if='inposterior(CoalescentConstant.t:$(n)) and inposterior(popSize.t:$(n)) and popSize.t:$(n)/estimate=true'>
                Coalescent population size parameter of partition t:$(n)
            </connect>

            <connect srcID='popSize.t:$(n)' targetID='state' inputName='stateNode'
                     if='inposterior(CoalescentConstant.t:$(n)) and inposterior(popSize.t:$(n)) and popSize.t:$(n)/estimate=true'/>

            <connect srcID='popSizeScaler.t:$(n)' targetID='mcmc' inputName='operator'
                     if='inposterior(CoalescentConstant.t:$(n)) and inposterior(popSize.t:$(n)) and popSize.t:$(n)/estimate=true'>
                Scale population size of Coalescent prior of tree t:$(n)
            </connect>

            <connect srcID='popSize.t:$(n)' targetID='tracelog' inputName='log'
                     if='inposterior(CoalescentConstant.t:$(n)) and inposterior(popSize.t:$(n)) and popSize.t:$(n)/estimate=true'/>
        </subtemplate>

        <!-- Coalescent for Exponential population -->
        <subtemplate id='CoalescentExponentialPopulation' class='bacter.model.ACGCoalescent'
                     mainid='CoalescentExponential.t:$(n)'>
            <![CDATA[
            <plugin spec='bacter.model.ACGCoalescent' id="CoalescentExponential.t:$(n)">
                <tree idref="Tree.t:$(n)"/>
                <rho id="rho.t:$(n)" spec="parameter.RealParameter" value="0.001"/>
                <delta id="delta.t:$(n)" spec="parameter.RealParameter" value="1000"/>
                <populationModel id="popModelExponentialGrowth.t:$(n)" spec="beast.evolution.tree.coalescent.ExponentialGrowth">
                    <popSize id="popFinalSize.t:$(n)" spec="parameter.RealParameter" value="1" estimate="true"/>
                    <growthRate id="popGrowthRate.t:$(n)" spec="parameter.RealParameter" value="0.1" estimate="true"/>
                </populationModel>
            </plugin>

            <prior id='popFinalSizePrior.t:$(n)' x='@popFinalSize.t:$(n)'>
                <distr spec="beast.math.distributions.OneOnX"/>
            </prior>

            <prior id='popGrowthRatePrior.t:$(n)' x='@popGrowthRate.t:$(n)'>
                <distr spec="beast.math.distributions.OneOnX"/>
            </prior>

            <operator id='popFinalSizeScaler.t:$(n)' spec='ScaleOperator' scaleFactor="0.8"
                weight="1" parameter="@popFinalSize.t:$(n)"/>

            <operator id='popGrowthRateScaler.t:$(n)' spec='ScaleOperator' scaleFactor="0.8"
                weight="1" parameter="@popGrowthRate.t:$(n)"/>
            ]]>
            <plate fragment="popModelDependentACGOperators" var="model" range="popModelExponentialGrowth"/>

            <connect srcID='CoalescentExponential.t:$(n)' targetID='prior' inputName='distribution'
                     if='inposterior(CoalescentExponential.t:$(n)) and Tree.t:$(n)/estimate=true'>Coalescent prior with
                exponential rate on tree t:$(n)
            </connect>
            <connect srcID='popFinalSizePrior.t:$(n)' targetID='prior' inputName='distribution'
                     if='inposterior(CoalescentExponential.t:$(n)) and inposterior(popFinalSize.t:$(n)) and popFinalSize.t:$(n)/estimate=true'>
                Coalescent population size parameter of partition t:$(n)
            </connect>
            <connect srcID='popGrowthRatePrior.t:$(n)' targetID='prior' inputName='distribution'
                     if='inposterior(CoalescentExponential.t:$(n)) and inposterior(popGrowthRate.t:$(n)) and popGrowthRate.t:$(n)/estimate=true'>
                Coalescent growth rate of partition t:$(n)
            </connect>

            <connect srcID='popFinalSize.t:$(n)' targetID='state' inputName='stateNode'
                     if='inposterior(CoalescentExponential.t:$(n)) and inposterior(popFinalSize.t:$(n))  and popFinalSize.t:$(n)/estimate=true'/>
            <connect srcID='popGrowthRate.t:$(n)' targetID='state' inputName='stateNode'
                     if='inposterior(CoalescentExponential.t:$(n)) and inposterior(popGrowthRate.t:$(n)) and popGrowthRate.t:$(n)/estimate=true'/>

            <connect srcID='popFinalSizeScaler.t:$(n)' targetID='mcmc' inputName='operator'
                     if='inposterior(CoalescentExponential.t:$(n)) and inposterior(popFinalSize.t:$(n))  and popFinalSize.t:$(n)/estimate=true'>
                Scale population size of Coalescent prior of tree t:$(n)
            </connect>
            <connect srcID='popGrowthRateScaler.t:$(n)' targetID='mcmc' inputName='operator'
                     if='inposterior(CoalescentExponential.t:$(n)) and inposterior(popGrowthRate.t:$(n)) and popGrowthRate.t:$(n)/estimate=true'>
                Scale growth rate of Coalescent prior of tree t:$(n)
            </connect>

            <connect srcID='popFinalSize.t:$(n)' targetID='tracelog' inputName='log'
                     if='inposterior(CoalescentExponential.t:$(n)) and inposterior(popFinalSize.t:$(n)) and popFinalSize.t:$(n)/estimate=true'/>
            <connect srcID='popGrowthRate.t:$(n)' targetID='tracelog' inputName='log'
                     if='inposterior(CoalescentExponential.t:$(n)) and inposterior(popGrowthRate.t:$(n)) and popGrowthRate.t:$(n)/estimate=true'/>
        </subtemplate>

    </mergewith>
</beast>


